{"version":3,"sources":["config.js","components/Nav.js","components/SearchForm.js","components/Photo.js","components/NoResults.js","components/Gallery.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["config","API_KEY","Nav","props","className","to","onClick","navClicked","SearchForm","state","searchedText","onSearch","setState","query","value","searchSubmit","e","preventDefault","history","push","search","currentTarget","reset","searchFor","onSubmit","this","type","name","onChange","ref","input","placeholder","required","fill","height","viewBox","width","xmlns","d","Component","Photo","url","photo_info","farm","server","id","secret","src","alt","title","NoResults","loading","Gallery","clicked","doPhotosExist","length","map","photo","key","loadingResponse","location","pathname","searchTerm","replace","displayResults","NotFound","href","App","photos","cat","meme","train","navSearch","navTerm","flickrURL","axios","get","then","res","newArray","data","catch","err","console","log","searchForPhotos","basename","process","exact","path","render","dog","component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40dbf4cc.chunk.js","sourcesContent":["const config = {\n    API_KEY: `02698e088c794b7dee3ba43a1f7e5726`\n}\n\nexport default config;","import React from 'react';\nimport { NavLink } from 'react-router-dom'\n \nconst Nav = (props) => {\n        return (\n            \n            <nav className=\"main-nav\">\n                <ul>\n                    <li><NavLink to=\"/search/trains\" onClick={ props.navClicked }>Trains</NavLink></li>\n                    <li><NavLink to=\"/search/cats\" onClick={ props.navClicked } >Cats</NavLink></li>\n                    <li><NavLink to=\"/search/dogs\" onClick={ props.navClicked }>Dogs</NavLink></li>\n                </ul>\n            </nav>\n    \n        )\n\n}\n\n\nexport default Nav;","import React, { Component } from 'react';\n\nclass SearchForm extends Component {\n    state = {\n        searchedText: ``\n    }\n\n    onSearch = () => {\n        this.setState({\n            searchedText: this.query.value\n        });\n    }\n\n    searchSubmit = (e) => {\n        e.preventDefault();\n        //push to history so URL shows\n        this.props.history.push(`/search/${this.query.value}`);\n        this.search(this.state.searchedText);\n        e.currentTarget.reset();\n        \n    }\n    \n    search = (query)=> {\n        this.props.searchFor(query);\n    }\n    render() {\n        return(\n            <form className=\"search-form\" onSubmit={ this.searchSubmit }>\n            <input\n                type=\"search\"\n                name=\"search\"\n                onChange={this.onSearch}\n                ref={(input) => this.query = input}\n                placeholder=\"Search\"\n                required \n            />\n            <button type=\"submit\" className=\"search-button\">\n              <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n                <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n              </svg>\n            </button>\n          </form>\n        )\n    }\n}\n\nexport default SearchForm;","import React from 'react'\n\nconst Photo = (props) => {\n    let url = `https://farm${props.photo_info.farm}.staticflickr.com/${props.photo_info.server}/${props.photo_info.id}_${props.photo_info.secret}_m.jpg`\n    return (\n        <li><img src={url} alt={props.photo_info.title} /></li>\n    )\n}\nexport default Photo","import React from 'react';\n\nconst NoResults = (props) => {\n    return(\n        props.loading? <h1> LOADING.. </h1> : <h1>There were no results..</h1>\n  \n    )\n}\n\nexport default NoResults;","import React, { Component } from 'react';\nimport Photo from './Photo'\n\nimport NoResults from './NoResults'\n\nclass Gallery extends Component {\n    state = {\n        clicked: this.props.clicked\n    }\n    loadingResponse() {\n        return <NoResults loading={this.props.loading} />\n    }\n    doPhotosExist = () => {\n\n        let photo_info = this.props.photo_info\n        // console.log(`GALLERY`, photo_info)\n        // Check if props exist, and if so that there are results\n        if (photo_info && photo_info.length > 0) {\n            let photos_result;\n    \n            photos_result = photo_info.map(photo => {\n                 return <Photo photo_info={ photo } key={ photo.id }/>\n            })\n\n            return photos_result\n        } else {\n            return this.loadingResponse()\n        }\n    }\n    componentDidMount() {\n        //search from URL bar changes\n\n        //pathname is not /, and if search isnt done via clicking links or searchForm\n        if(this.props.history.location.pathname.length > 1) {\n            //removes /search/ from pathname\n            const searchTerm = this.props.history.location.pathname.replace(/[/]search[/]/g, '')\n            this.props.displayResults(searchTerm)\n        }\n\n    }\n    render() {\n    \n        return (\n            <div className=\"photo-container\">\n                <h2>Results </h2>\n                <ul>\n                    { this.doPhotosExist() }\n                </ul>\n            </div>\n\n        )\n    }\n\n\n}\n\nexport default Gallery\n","import React, { Fragment } from 'react';\n\nconst NotFound = () => {\n    return(\n        <Fragment>\n            <h1>404 Not Found!</h1>\n            <a href=\"/\">Go Home</a>\n        </Fragment>\n\n    )\n}\n\nexport default NotFound;","import React, { Component, Fragment } from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport axios from 'axios';\nimport config from './config';\nimport Nav from './components/Nav';\nimport SearchForm from './components/SearchForm';\nimport Gallery from './components/Gallery';\nimport NotFound from './components/NotFound';\n\nimport '../src/index.css';\n\nclass App extends Component {\n  state = {\n    photos: [],\n    cat: [],\n    meme: [],\n    train: [],\n    //update state so gallery reloads\n    clicked: false,\n    loading: true\n  }\n\n  navSearch = (navTerm) => {\n    const flickrURL = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${config.API_KEY}&text=${navTerm}&safe_search=1&per_page=24&page=1&format=json&nojsoncallback=1`\n\n    //switched from flickr-sdk to axios\n      axios.get(flickrURL)\n        .then(res => {\n          const newArray = []\n\n          if(res.data.photos){\n            newArray.push(res.data.photos.photo)\n          }\n        \n          if (newArray[0].length === 0){\n     \n            this.setState({\n              [`${navTerm}`]: newArray,\n              loading: false\n            })  \n          } else {\n            //reset to true\n            this.setState({\n              [`${navTerm}`]: newArray,\n              loading: true\n            })\n          }\n        })\n        .catch(err => console.log(err))\n  }\n\n  searchForPhotos = (query = 'pelican') => {\n\n    const flickrURL = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${config.API_KEY}&text=${query}&safe_search=1&per_page=24&page=1&format=json&nojsoncallback=1`\n\n    //reset state so loading will show in between search\n    this.setState({\n      photos: [],\n      loading: true\n    })\n\n    //switched from flickr-sdk to axios\n      axios.get(flickrURL)\n        .then(res => {\n          const newArray = []\n\n          if(res.data.photos){\n            newArray.push(res.data.photos.photo)\n          }\n          \n\n          if (newArray[0].length === 0){\n            this.setState({\n              photos: newArray,\n              loading: false\n            })  \n          } else {\n            //reset to true\n            this.setState({\n              photos: newArray,\n              loading: true\n            })\n          }\n        })\n        .catch(err => console.log(err))\n  }\n  navClicked = () => {\n   \n    this.setState({\n      //on/off state\n        clicked: !this.state.clicked\n    }) \n  }\n  //load photos on first arrival\n  componentDidMount() {\n\n    this.searchForPhotos()\n    //nav calls only happen once to API\n    this.navSearch(`cat`)\n    this.navSearch(`dog`)\n    this.navSearch(`train`)\n\n  }\n\n  render() {\n    \n    return (\n      <Fragment>\n      <BrowserRouter basename={process.env.PUBLIC_URL + '/'}>\n       \n       <Nav navClicked={this.navClicked}/>\n           <Switch>\n             {/* HOME PATH */}\n             <Route exact path=\"/\"  render={(props) => \n             <Fragment>\n\n               <SearchForm { ...props } searchFor={this.searchForPhotos}/>\n               <Gallery { ...props }\n                  photo_info={this.state.photos[0]}\n                  displayResults={this.searchForPhotos}\n                  loading={ this.state.loading }\n                  clicked={this.state.clicked} \n              /> \n             </Fragment>\n \n             } />\n             \n            {/* NAV PATHS */}\n             <Route path=\"/search/cats\" render={(props) =>\n               <Fragment>\n\n                 <SearchForm { ...props } searchFor={this.searchForPhotos}/>\n                 <Gallery { ...props }\n               \n                    photo_info={ this.state.cat[0] }\n                    loading={ this.state.loading }\n                    clicked={this.state.clicked}\n                /> \n\n               </Fragment>\n             }/>\n              <Route path=\"/search/dogs\" render={(props) =>\n               <Fragment>\n\n                 <SearchForm { ...props } searchFor={this.searchForPhotos}/>\n                 <Gallery { ...props }\n               \n                    photo_info={ this.state.dog[0] }\n                    loading={ this.state.loading }\n                    clicked={this.state.clicked}\n                /> \n\n               </Fragment>\n             }/>\n\n              <Route path=\"/search/trains\" render={(props) =>\n               <Fragment>\n\n                 <SearchForm { ...props } searchFor={this.searchForPhotos}/>\n                 <Gallery { ...props }\n                \n                    photo_info={ this.state.train[0] }\n                    loading={ this.state.loading }\n                    clicked={this.state.clicked}\n                /> \n\n               </Fragment>\n             }/>\n             \n             {/* QUERY/SEARCH PATH */}\n             <Route path=\"/search/:query\" render={(props) =>\n               <Fragment>\n\n                 <SearchForm { ...props } searchFor={this.searchForPhotos}/>\n                 <Gallery { ...props }\n                    displayResults={this.searchForPhotos}\n                    photo_info={ this.state.photos[0] }\n                    loading={ this.state.loading }\n                    clicked={this.state.clicked}\n                /> \n\n               </Fragment>\n             }/>\n\n\n             {/* 404 PATH */}\n             <Route path=\"*\" component= { NotFound }/>\n           </Switch>\n        \n       </BrowserRouter>\n      </Fragment>\n\n \n  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL + '/'}><App /></Router>, document.getElementById('container'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}